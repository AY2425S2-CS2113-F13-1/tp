@startuml
actor User as User
participant FlipCommand as ":FlipCommand"
participant Printer as ":Printer"

User -> FlipCommand: execute()
activate FlipCommand


FlipCommand -> FlipCommand: flip()
activate FlipCommand
FlipCommand -> FlipCommand: checkNumberOfWords(words)
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: checkValidOutcomeWord(words[1])
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: checkWithinBalance(userData.betAmount, userData.balance)
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: generateFlip()
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: getOutcome(actualFlip, words[1])
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand -> FlipCommand: processOutcome(outcome)
activate FlipCommand
FlipCommand --> FlipCommand
deactivate FlipCommand


FlipCommand -> Printer: printFlipOutcome(actualFlip, outcome, userData.betAmount)
activate Printer
Printer --> FlipCommand
deactivate Printer
FlipCommand -> Printer: printFlipSummary(userData)
activate Printer
Printer --> FlipCommand
deactivate Printer
FlipCommand -> Printer: printUnlockedAchievements(achievementList)
activate Printer
Printer --> FlipCommand
deactivate Printer
FlipCommand --> FlipCommand
deactivate FlipCommand
FlipCommand --> User
deactivate FlipCommand
@enduml